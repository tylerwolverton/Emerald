Number testNum; 
Number testNumInit = 12; 
Number testNum2 = 2.5;  
Number testNum3 = .7;
Vec2 testVec2;		
Vec2 testVec2Init = Vec2(x:5,y:5);
Bool testBool;
Bool testBool2 = true;
Bool testBool3 = false;
String testStr;
String testStrInit = "Hello";
Entity testEntity
Entity player

Function DebugPrint()
{
	Number result = 1 + 2
	if( testNum == testNumInit )
	{}

	testVec2 = testVec2Init;
	if( testVec2 == testVec2Init )
	{
	}
}

// Error cases to comment in to test parser
State NoPrint
{	
	Function TestEvent()
	{		
		//ChangeState( GlobalAssignmentTest );

		// OnEvent( SubEvent ) {}
	}

	OnEnter()
	{
		DebugPrint()
		// unknownVar = 6;
		// testVec2.z = 27;
		// State SubState {}
		// testStr = testVec2;
		// testVec2 + testStr;
		// testNum = testVec2 + testStr;
		// testNum2 = 2.5.4.4.34;  

		
		if( 1 == 1 )
		{
			Number transitiveTestNum = 10;
		}
		//transitiveTestNum = 2;
		
		PrintToConsole( text: "Running unit tests..." ) 

		ChangeState( GlobalAssignmentTest );
	}
}

State GlobalAssignmentTest
{		
	OnEnter()
	{
		testNum = testNumInit;
		if( testNum == testNumInit )
		{
			testVec2 = testVec2Init;
			//if( testVec2 == testVec2Init )
			//{
			// 	testStr = testStrInit;
			// 	if( testStr == testStrInit )
			// 	{
			// 		Number temp = testVec2.x - 6
			// 		//testVec2.x = 1;
			// 		//testVec2.y = 2;
			// 		Vec2 actualVec = Vec2( x:1, y:2 );
			// 		if( testVec2 == actualVec )
			// 		{
			// 			PrintToConsole( text: "GlobalAssignmentTest: Success", color:"green" )
			// 		}
			// 		else
			// 		{
			// 			PrintToConsole( text:"GlobalAssignmentTest: Failed", color: "red" )
			// 		}
			// 	}
			// 	else
			// 	{
			// 		PrintToConsole( text: "GlobalAssignmentTest: Failed", color: "red" )
			// 	}
			//}
			// else
			// {	
			// 	PrintToConsole( text: "GlobalAssignmentTest: Failed", color: "red" )
			// }	
		}
		else
		{
			PrintToConsole( text: "GlobalAssignmentTest: Failed", color: "red" )
		}

		ChangeState( ScopeAssignmentTest );
	}
}

State ScopeAssignmentTest
{		
	OnEnter()
	{
		Number localTestNum = 1;
		if( localTestNum == 1 )
		{
			localTestNum = 2;
		}
		else
		{
			PrintToConsole( text: "ScopeAssignmentTest: Failed to initialize local variable Expected: 1 Found: " + localTestNum, color: "red" )
		}

		if( localTestNum == 2 )
		{
			Number localTestNum;
			localTestNum = 12;
		}
		else
		{
			PrintToConsole( text: "ScopeAssignmentTest: Failed to set var in if statement", color: "red" )
		}

		// This should be a parsing error probably
		//if( localTestNum == 12 )
		//{
		//	FireEvent( PrintToConsole( text = "ScopeAssignmentTest: Failed to hide scope of local var", color = "red" ) );
		//}

		PrintToConsole( text: "ScopeAssignmentTest: Success", color: "green" )

		ChangeState( OperatorTest );
	}
}

State OperatorTest
{
	OnEnter()
	{
		// ERROR HERE
		Number testNum = -(1 + 2 * 3 - 4 / 2);
		if( testNum != -5 )
		{
			PrintToConsole( text: "OperatorTest: Failed", color: "red" )
		}
		else
		{
			PrintToConsole( text: "OperatorTest: Success", color: "green" )
		}

		ChangeState( LogicalOperatorTest );
	}
}

State LogicalOperatorTest
{
	OnEnter()
	{
		if( 1 == 1 
			&& 2 == 2 )
		{
			if( 3 == 1 
				|| 2 == 2 )
			{
				if( ( 1 == 1 || 6 == 7 )
					&& 2 == 2 
					|| "yes" == "no" )
				{
					PrintToConsole( text: "LogicalOperatorTest: Success", color: "green" )
				}
				else
				{
					PrintToConsole( text: "LogicalOperatorTest: Failed combination", color: "red" )
				}
			}
			else
			{
				PrintToConsole( text: "LogicalOperatorTest: Failed or", color: "red" )
			}
		}
		else
		{
			PrintToConsole( text: "LogicalOperatorTest: Failed and", color: "red" )
		}

		ChangeState( BoolTest );
	}
}

State BoolTest
{
	OnEnter()
	{
		Bool a;
		Bool b = true;

		if( !( a && b ) )
		{
			PrintToConsole( text: "BoolTest: Success", color: "green" )
		}
		else
		{
			PrintToConsole( text: "BoolTest: Failed", color: "red" )
		}

		ChangeState( MemberTest )
	}
}

// This succeeds if it compiles
State MemberTest
{
	OnEnter()
	{
		Vec2 vec1 = Vec2( x:1, y:2 )
		Vec3 vector3 = Vec3( x:1, y:2, z:3 )
		// Number a = vec1.x;
		
		// Test for dynamic assignment
		String a
		// a = vec1.y
		// a = vec1.z
		// a = vec1
		// a.x = 9
		// a.y = 8

		// Vec2 frog = a * Vec2(0,0)

		Number b
		// b = a.x

		// Number posX = testEntity.target.position.x + 6
		// // testEntity.target = player
		// //posX = testEntity.target.curPosition.x.y
		// //posX = testEntity.target.x.y
		
		// testEntity.target.testVec.x = posX = 10
		// if( testEntity.target.testVec.x != 10
		// 	|| posX != 10 )
		// {
		// 	PrintToConsole( text: "MemberTest: Failed, expected 10 but found ", color: "red" )
		// 	PrintToConsole( text: testEntity.target.testVec.x, color: "red" )
		// 	return;
		// }


		vec1.x = 6
		if( vec1.x != 6 )
		{
			PrintToConsole( text: "MemberTest: Failed, expected 6 but found ", color: "red" )
			PrintToConsole( text: vec1.x, color: "red" )
			return;
		}
		
		//vec1.z = 7

		vector3.z = 6
		if( vector3.z != 6 )
		{
			PrintToConsole( text: "MemberTest: Failed, expected 6 but found ", color: "red" )
			PrintToConsole( text: vector3.z, color: "red" )
			return;
		}

		PrintToConsole( text: "MemberTest: Success", color: "green" )

		ChangeState( BinaryOpTest )
	}
}

// This succeeds if it compiles
State BinaryOpTest
{
	OnEnter()
	{
		RunNumberTests()
		RunVec2Tests()
		RunStringTests()
		RunEntityTests()

		PrintToConsole( text: "BinaryOpTest: Complete", color: "green" )
	}

	Function RunNumberTests()
	{
		Number aNum = 4
		Number bNum = 2
		Vec2 aVec = Vec2( x:5, y:6 )
		Vec2 bVec = Vec2( x:2, y:10 )

		if( ( aNum - bNum ) != 2 )	  			{ PrintToConsole( text: "BinaryOpTest: Failed Number - Number", color :"red" ) }
		if( ( aNum * bNum ) != 8 )	  			{ PrintToConsole( text: "BinaryOpTest: Failed Number * Number", color :"red" ) }
		if( ( aNum / bNum ) != 2 )    			{ PrintToConsole( text: "BinaryOpTest: Failed Number / Number", color :"red" ) }
		if( ( aNum > bNum ) != true)  			{ PrintToConsole( text: "BinaryOpTest: Failed Number > Number", color :"red" ) }
		if( ( aNum >= bNum ) != true) 			{ PrintToConsole( text: "BinaryOpTest: Failed Number >= Number", color: "red" ) }
		if( aNum < bNum )  		  				{ PrintToConsole( text: "BinaryOpTest: Failed Number < Number", color :"red" ) }
		if( aNum <= bNum )  	  				{ PrintToConsole( text: "BinaryOpTest: Failed Number <= Number", color: "red" ) }
	}

	Function RunVec2Tests()
	{
		Number aNum = 4
		Number bNum = 2
		Vec2 aVec = Vec2( x:5, y:6 )
		Vec2 bVec = Vec2( x:2, y:10 )

		// Vec 2 tests
		if( aVec + bVec != Vec2( x:7, y:16 ) )  { PrintToConsole( text: "BinaryOpTest: Failed Vec2 + Vec2", color: "red" ) }
		if( aVec - bVec != Vec2( x:3, y: -4 ) )  { PrintToConsole( text: "BinaryOpTest: Failed Vec2 - Vec2", color: "red" ) }
		if( aVec * bVec != Vec2( x:10, y:60 ) ) { PrintToConsole( text: "BinaryOpTest: Failed Vec2 * Vec2", color: "red" ) }
		if( aVec * bNum != Vec2( x:10, y:12 ) ) { PrintToConsole( text: "BinaryOpTest: Failed Vec2 * Number", color: "red" ) }
		if( aNum * bVec != Vec2( x:8, y:40 ) )  { PrintToConsole( text: "BinaryOpTest: Failed Number * Vec2", color: "red" ) }
		//bVec = aNum + bVec
		//aVec = aVec / bVec
		// Bool vecGreater = aVec > bVec 
	}

	Function RunStringTests()
	{
		Number aNum = 4
		Number bNum = 2
		Vec2 aVec = Vec2( x:5, y:6 )
		Vec2 bVec = Vec2( x:2, y:10 )
		String aStr = "hello"
		String bStr = "goodbye"
		Bool aBool = true
		Bool bBool = false

		if( aStr + bStr != "hellogoodbye" ) 			{ PrintToConsole( text: "BinaryOpTest: Failed String + String", color: "red" ) }
		if( aStr + aNum != "hello4.00" )				{ PrintToConsole( text: "BinaryOpTest: Failed String + Number", color: "red" ) }
		if( aNum + bStr != "4.00goodbye" ) 				{ PrintToConsole( text: "BinaryOpTest: Failed Number + String", color: "red" ) }
		if( aStr + bVec != "hello2, 10" ) 				{ PrintToConsole( text: "BinaryOpTest: Failed String + Vec2 ",  color: "red" ) }
		if( aVec + bStr != "5, 6goodbye" ) 				{ PrintToConsole( text: "BinaryOpTest: Failed Vec2 + String " + aVec + bStr,  color: "red" ) }
		if( aStr + bBool != "hellofalse" ) 				{ PrintToConsole( text: "BinaryOpTest: Failed String + Bool ",  color: "red" ) }
		if( aBool + bStr != "truegoodbye" )				{ PrintToConsole( text: "BinaryOpTest: Failed Bool + String ",  color: "red" ) }
		if( aNum * bVec != Vec2( x:8, y:40 ) ) 			{ PrintToConsole( text: "BinaryOpTest: Failed Number * Vec2",   color: "red" ) }
		if( aNum * bVec != Vec2( x:8, y:40 ) ) 			{ PrintToConsole( text: "BinaryOpTest: Failed Number * Vec2",   color: "red" ) }
		if( aNum * bVec != Vec2( x:8, y:40 ) ) 			{ PrintToConsole( text: "BinaryOpTest: Failed Number * Vec2",   color: "red" ) }
		if( aNum * bVec != Vec2( x:8, y:40 ) ) 			{ PrintToConsole( text: "BinaryOpTest: Failed Number * Vec2",   color: "red" ) }
		if( aBool + bStr != "truegoodbye" )				{ PrintToConsole( text: "BinaryOpTest: Failed Bool + String ",  color: "red" ) }
		if( aBool + bStr != "truegoodbye" )				{ PrintToConsole( text: "BinaryOpTest: Failed Bool + String ",  color: "red" ) }
		if( aBool + bStr != "truegoodbye" )				{ PrintToConsole( text: "BinaryOpTest: Failed Bool + String ",  color: "red" ) }
		if( aBool + bStr != "truegoodbye" )				{ PrintToConsole( text: "BinaryOpTest: Failed Bool + String ",  color: "red" ) }
		if( aStr == bStr )								{ PrintToConsole( text: "BinaryOpTest: Failed String == String ", color: "red" ) }		
	}

	Function RunEntityTests()
	{
		Entity aEntity = null
		Entity bEntity = aEntity		
		
		if( aEntity != bEntity ) 						{ PrintToConsole( text: "BinaryOpTest: Failed Entity == Entity ", color: "red" ) }
	}
}

