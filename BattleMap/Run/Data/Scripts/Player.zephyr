Number curHealth = 5;
Bool canShoot = true;
Number fireCooldown = .5;
Vec2 testVec

Function OnSpawn( Number maxHealth )
{
    RegisterKeyEvent( key: "W", event: "MoveUp" )
    RegisterKeyEvent( key: "A", event: "MoveLeft" )
    RegisterKeyEvent( key: "S", event: "MoveDown" )
    RegisterKeyEvent( key: "D", event: "MoveRight" )
}

Function OnHealthChange( Number newHealth )
{
    if( newHealth < curHealth )
    {
        ActivateInvincibility()
        ChangeSpriteAnimation( newAnim: "Damaged" )
        StartNewTimer( durationSeconds: 2, onCompletedEvent: "InvincibilityExpired" )
    }

    curHealth = newHealth;
}

Function InvincibilityExpired()
{
    DeactivateInvincibility()
    ChangeSpriteAnimation( newAnim: "Walk" )
}

// Input Events
// TODO? Add parameter passing into key events to remove the need to make separate events for each direction
Function MoveUp()
{
    MoveInDirection( direction: Vec2( 0, 1 ) )
}

Function MoveDown()
{
    MoveInDirection( direction: Vec2( 0, -1 ) )
}

Function MoveLeft()
{
    MoveInDirection( direction: Vec2( -1, 0 ) )
}

Function MoveRight()
{
    MoveInDirection( direction: Vec2( 1, 0 ) )
}

// Attacks
Function ShotCooldownExpired()
{
    canShoot = true;
}

Function ShootFireball( Vec2 fireballOffset, Number shotOrientation )
{
    if( !canShoot )
    {
        return;
    }

    PlaySound( name: "LOZ_Bomb_Blow" volume: .5 )
    SpawnEntity( type: "PlayerFireball", position: parentEntity.position + fireballOffset, orientation: shotOrientation )
    StartNewTimer( durationSeconds: fireCooldown, onCompletedEvent: "ShotCooldownExpired" )

    canShoot = false;
}

Function ShootFireballUp()
{
    ShootFireball( fireballOffset: Vec2( 0, .6 ), shotOrientation: 90 )
}

Function ShootFireballLeft()
{
    ShootFireball( fireballOffset: Vec2( -.6, 0 ), shotOrientation: 180 )
}

Function ShootFireballDown()
{
    ShootFireball( fireballOffset: Vec2( 0, -.6 ), shotOrientation: 270 )
}

Function ShootFireballRight()
{
    ShootFireball( fireballOffset: Vec2( .6, 0 ), shotOrientation: 0 )
}


State Default
{
    // Bool isFirst = true
    // Number testVal = 12

    // OnUpdate()
    // {
    //     if( isFirst )
    //     {
    //         isFirst = false
    //         // testVal = 7
    //         blob.SummonBlob( newPos: curPosition, blobVal: testVal )
    //         PrintToConsole( text: "isFirst is true" )
    //     }

    //     PrintDebugText( text: "TestVal: " + testVal )
    // }
}

